"use server";
import { GoogleSpreadsheet } from "google-spreadsheet";
import { JWT } from "google-auth-library";

export const handleSubmit = async (formData: FormData) => {
  const name = formData.get("name") as string;
  const subject = formData.get("subject") as string;
  const email = formData.get("email") as string;
  const message = formData.get("message") as string;

  // console.log(name, subject, message);

  try {
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, "\n"),
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });

    const doc = new GoogleSpreadsheet(
      process.env.GOOGLE_SHEETS_ID!,
      serviceAccountAuth
    );

    await doc.loadInfo(); // loads document properties and worksheets
    // const sheet = await doc.addSheet({ headerValues: ["name", "email"] });

    const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`

    const formatDate = () => {
      const now = new Date();
      const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ];
      const monthName = months[now.getMonth()]; // Get month name from array
      const day = now.getDate(); // Get day of the month
      const year = now.getFullYear(); // Get full year
      return `${monthName} ${day}, ${year}`; // Format the date string
    };

    const addRow = await sheet.addRows([
      { name: name, subject: subject, message: message, date: formatDate() },
    ]);
  } catch {
    console.log("Google api error");
  }

  console.log("on the server");
};
